создание папки
создание репозитория в github
.gitignore
git init
git add .
git commit -m "initial"
git remote add origin https://github.com/AYamnik666/excel-course.git
git push -u origin master
git checkout -b webpack
webbpack.config.js
git commit -m 'create webpack config

git push -u origin webpack
npm init
  "private": true
https://webpack.js.org/guides/getting-started/
npm install webpack webpack-cli --save-dev
edit webpack.config.js
new dir src -> index.js
настройка контекста в webpackconfig
new file module.js
в index.js импорт module.js
package.json
	    "start": "webpack"
	    "build": "webpack --mode production"

npm run start
	npm i -g webpack webpack-cli

node dist/boundle.js
npm run build

Добавление плагинов
webpack.config.js
	https://webpack.js.org/plugins/html-webpack-plugin/
	npm install --save-dev html-webpack-plugin

	https://webpack.js.org/plugins/copy-webpack-plugin/
	npm install copy-webpack-plugin --save-dev

	npm install --save-dev clean-webpack-plugin
		подключение
const { CleanWebpackPlugin } = require('clean-webpack-plugin');

Один файл в boundle
npm run build 

	const HTMLWebpackPlugin = require('html-webpack-plugin');
	new HTMLWebpackPlugin({
    template: 'index.html'
})

const CopyPlugin = require("copy-webpack-plugin");
new CopyPlugin( [
      { from: path.resolve(__dirname, 'src/favixon.ico'),
       to: path.resolve(__dirname, 'dist')}])

https://webpack.js.org/plugins/mini-css-extract-plugin/
npm install --save-dev mini-css-extract-plugin
	const MiniCssExtractPlugin = require("mini-css-extract-plugin");
    new MiniCssExtractPlugin({
        filename: 'boundele.[hash].css'
    })



создать в src -> index.html
	    <div id="app" class="container"></div>

npm run start
	в boundle появляется index.html

создать src -> favicon.ico

index.html ->     <link rel="shortcut icon" href="favicon.ico">

webpack.config.js
    resolve:{extensions: ['.js'],
    alias: {
        '@': path.resolve(__dirname, 'src'),
        'core': path.resolve(__dirname, 'src/core')
    },


Loaders

npm install sass-loader sass --save-dev

npm i -D css-loader
webpack.config.js
	  module: {
    rules: [
      {
        test: /\.s[ac]ss$/i,
        use: [
         
          MiniCssExtractPlugin.loader,
          "css-loader",
          "sass-loader",
        ],
      },

создать index.scss в  src -> scss
	$red: blue;

body{
    background: $red;
}



index.js 
	import './scss/index.scss'

npm install --save-dev babel-loader @babel/core


npm install @babel/preset-env --save-dev

package.json
	  "browserslist": "> 0.25%, not dead",
webpack.config.js
	const isProd = process.env.NODE_ENV=== 'production'
const isDev =!isProd

npm i -D cross-env

package.json
	    "start": "cross-env NODE_ENV=development webpack",
    "build": "cross-env NODE_ENV=production webpack --mode production"

console.log('isProd', isProd)
console.log('isDev ', isDev)

webpack.config.js
	     minify: {
        removeComments: isProd,
        collapseWhitespace: isProd
      }

const filename = ext => isDev ? `bundle.${ext}` : `bundle.[hash].${ext}`

    filename: filename('js'),
      filename: filename('css')

  devtool: isDev ? 'source-map' : false,

npm install webpack-dev-server --save-dev

package,json
    "start": "cross-env NODE_ENV=development webpack-dev-server --open",

webpack.config.js
  devServer: {
    port: 3000,
    hot: isDev
  },

npm install --save @babel/polyfill

webpack.config.js


const jsLoaders = () => {
  const loaders = [
    {
      loader: 'babel-loader',
      options: {
        presets: ['@babel/preset-env']
      }
    }
  ]

  if (isDev) {
    loaders.push('eslint-loader')
  }

  return loaders
}



        use: jsLoaders(),

npm i eslint eslint-loader babel-eslint -D


созадть файл
.eslintrc 
{"parser": "babel-esint",
"env": {
    "es6": true,
    "browser": true,
    "node": true
},
"rules":{

},
"exdends": [""]
},


eslnt.ignore


npm i -D eslint-config-google







 

	



 
